# FIRST SOLID VERSION
# DOES NOT CONSIDER NEIGHBOUR RELATIONSHIPS YET
# ONE REWARD TURNED OUT TO BE ODDLY COUNTERPRODUCTIVE; THEY HAVE NOT BEEN KICKED OUT YET THOUGH

stack0 = [164.77971649477394, 182.94575589937082, 195.0948307495007, 195.20555866328343, 159.98919581341053, 188.5243780921063, 171.74485859303766, 189.21279058456787, 193.79235263916993, 177.2641360120164, 197.4775301928744, 151.5679129271898, 190.70744692264802, 194.36573886524087, 164.7570332930158, 157.9995312514258, 187.47220986066029, 158.04850131837918, 159.78141047879075, 180.57852125212912, 184.25407531100456, 157.786834502655, 190.53806631395736, 172.49301459278337, 173.56273132748987, 187.00722319931452, 188.4235601727413, 177.47250671039944, 178.47226128325153, 196.60365645356092, 155.73161871653053, 197.01619338535093, 172.2712431801093, 179.92714459484858, 197.44745211849872, 160.7710881147844, 176.86227519291913, 164.6598985861713, 154.07802291932802, 164.32600107006795, 174.37309432542546, 194.8244421430844, 189.57661714753726, 168.7030494568472, 160.49975349887183, 199.96544460163884, 196.21165559424617, 177.19337297490793, 155.5316769424188, 178.28870102664266, 176.4593342081011, 184.9819975763667, 152.13117986222474, 153.38314972460034, 195.64533533323612, 198.46462858060983, 187.92586094614825, 176.78760927197277, 152.55052641171883, 155.59911385776812]
stack1 = [113.8497068528213, 137.26158386449816, 147.08442227432866, 131.53672205530276, 125.211625483597, 131.75995868335735, 135.81579278836273, 113.36134445894727, 124.90623029000037, 121.8277433815365, 117.63905612094976, 111.12811016631863, 133.70750314522905, 145.7835350621822, 125.59377320414146, 145.31158616404838, 116.16017877368117, 143.4365350776744, 132.49047130278572, 123.39816441851609, 109.9646743107416, 135.3135348817155, 100.01125860149712, 139.74023244491312, 106.46807801187927, 149.63503215985585, 104.96882302996303, 106.17869787299153, 148.19749745682233, 114.84722739901142, 127.2665810786522, 100.65778272896334, 123.09044444039101, 110.11551694118309, 136.48561015091508, 125.71250296794526, 116.93648888042696, 105.41947117328316, 114.81632473524365, 106.79528564542191, 120.52018564162717, 115.82861014130157, 149.69484848929193, 105.63231612974502, 125.08241526311073, 113.38802395319651, 127.76848217285614, 110.23436966441221, 133.44545430647258, 107.58671128629604, 102.38098606916645, 120.78788273132649, 131.98757906384873, 142.52988019800597, 125.24448080173372, 121.47139894015105, 107.93916163882659, 145.44379209570988, 118.80810298507484, 125.99749943601019]
stack2 = [77.8629896525278, 57.2189911520686, 57.17570065258823, 81.99106445888712, 85.36996535746466, 64.3678773634912, 83.3346202785267, 78.57986253007233, 53.26255475269605, 88.69817926302807, 60.22474890804472, 87.86454251867337, 62.04572191590522, 80.0684005380476, 90.31833294328567, 89.66395446957128, 95.42711717499301, 87.50372663563195, 73.15270212312797, 96.35298792008922, 64.65769558897306, 68.73928262228027, 86.01094773387359, 63.94251843467353, 66.9596707314586, 90.0076747303955, 73.40592420296585, 91.68874955514974, 90.50446576588591, 65.81682774463414, 94.92440338540229, 86.85284572326609, 74.00922702477973, 88.10344524035685, 53.942781890228986, 95.21001321349183, 84.06402925776695, 55.29092779129831, 56.918053476804076, 92.11322837538853, 91.17214660482068, 84.26836392444304, 90.8497840552721, 95.16745399691092, 59.159487291602524, 54.61745463918414, 61.67483989033218, 98.88331132584031, 97.26383461122765, 84.9853187272929, 67.11532900342151, 85.4635211346629, 71.06790455396336, 79.14647625907008, 95.60618430804655, 88.0715778265826, 65.25628053323395, 75.08918531296109, 90.48584623444921, 67.77905797804138, 69.04086479118233, 58.55699609094634, 81.2654848586412, 92.69443275482772, 98.13792731916541, 89.38241767577651, 83.42247110703694, 78.00004053080659, 73.41269159584729, 68.36518926649457, 52.93086765615087, 73.29124000826333, 61.88499068188017, 91.88288954411075, 89.9936494823893, 58.95051671708659, 85.05118862505894, 58.93289083144682, 91.6727358588858, 72.66997395203009, 68.66888397258393, 72.27673013087566, 85.44960506015227, 59.08079155260371, 93.87244048157032, 79.19619516762769, 89.04926907510841, 77.22583635722695, 97.80239642493164, 92.72250570526495]
stack3 = [214.89178156115122, 239.9228801343087, 226.36026761193898, 220.1799814474324, 213.6856514529306, 201.48384527257548, 210.49251100615427, 212.94060835274345, 202.4350906721213, 204.5012261787941, 204.8829551082963, 207.83775109021798, 242.59868025059424, 200.2834881162273, 227.46048589522132, 244.46721154292464, 222.0005531295068, 212.73609439150383, 213.19167686127733, 245.07647596733432, 211.90891307914052, 215.24558272685206, 240.2839500181777, 209.50949842972486, 247.3828721705101, 241.19759152495408, 224.49508870598856, 207.82030427363634, 227.12546207843772, 228.75509293713807, 227.6870492513661, 232.42896901000552, 224.8608724707908, 203.8661575840033, 238.11268213919644, 215.01249078933589, 241.8428824065549, 247.20367714656905, 242.16917951083138, 225.89107578702166, 227.52839474559647, 219.10904528877305, 241.1704585121567, 202.93878566432966, 215.23942391762438, 245.05633478623506, 212.06152564301547, 219.7152150417829, 201.82620392958822, 225.38254264564375, 229.12912896508158, 204.13136334558362, 241.05763753658078, 231.42211289985852, 233.27624168576116, 208.92318493392273, 246.6207463348679, 231.98604507963336, 237.78078473871523, 227.61417257030743]
stack4 = [289.4396946556619, 256.95039062328703, 253.32466943100624, 278.9186488554011, 283.9613381464053, 281.66802116928574, 290.6511446722573, 255.65264604118676, 259.9981507688929, 299.39878385318667, 289.1140092665243, 262.07398368971934, 298.8191086737673, 275.79950074593796, 264.1781556004018, 257.03205466922975, 270.2117845607213, 285.37686330742434, 292.07700144634975, 281.43810266065066, 267.46183951416356, 296.2877625066897, 275.09062300981117, 259.47261587700893, 271.0802807527711, 270.8861300051568, 277.507367559641, 286.5008109348952, 278.64908934658314, 273.148047790561, 252.53301299066374, 288.20082375066477, 260.04399816783496, 283.8447675176026, 299.8186876364381, 267.0962395971714, 281.9684355297879, 264.5375309687772, 284.8968382932868, 292.3049978271927, 274.0976962843501, 285.9474752630628, 273.9243858598643, 288.9804137644015, 266.88926000119545, 262.0879659750343, 295.42355577079945, 261.30917007271, 258.77396956810696, 279.56972475996884, 279.2606660167165, 250.62813316718274, 272.78804235426634, 287.5783171222284, 284.6905742130419, 273.0249762843552, 280.3659392654511, 268.87341707611415, 251.4857857672327, 269.35418421005033]
stack5 = [29.22057104408868, 5.6243793720168975, 34.807577790163634, 6.918085117387025, 30.54945379143576, 15.101895683776945, 51.34961328815556, 27.57517659219478, 38.60820298742249, 19.241064252221197, 34.52437780660767, 13.990507632798222, 13.197209321598386, 9.5460079017355, 10.647091724014768, 9.256660783652155, 54.21936374078443, 6.129834408672475, 27.296316499610302, 51.82406340556278, 41.57588221768511, 54.19433439358827, 26.59421997668389, 45.58441857276319, 16.254303952295086, 10.347898910197003, 6.001341343449496, 30.525963385291206, 37.12013158188241, 19.722642421183572, 35.63965881200632, 5.206941879947969, 50.49515318876593, 45.87980298246572, 20.30762843343691, 28.917400686545697, 46.65761047547096, 24.543641613622576, 28.935693582648902, 25.70104029093133, 7.293718306163278, 24.842946006935286, 40.81059698843064, 45.34965241303104, 54.64426192650443, 23.10033751562592, 37.74407953387787, 54.65471000441755, 19.542781087971733, 31.27932808604433, 23.199613821891614, 44.02214379919651, 21.435809166617222, 37.41258296665655, 39.1996676239715, 27.78002783479245, 31.22518400602899, 19.093434439772135, 19.616125702225357, 34.84615228810182, 9.76573661225329, 22.804635022770952, 25.153729155135103, 14.856137540116816, 21.20800361352947, 33.485525519727105, 13.846966894185043, 26.861108064175184, 18.08748153544126, 35.77798755975512, 53.158868472605846, 21.481641087695664, 29.4908546294378, 26.954971671621255, 13.062063815902686, 39.20666843266849, 37.413548400548656, 40.856671513811946, 41.85688029465244, 5.032099973031519, 35.675128862904906, 20.034358797630034, 53.461194980873074, 44.40215484982377, 19.918416931518415, 36.24691638513515, 24.774903886969874, 33.53291586932983, 18.06639485147233, 15.500053435895756, 40.54547661221842, 33.777977198372696, 41.75929750687532, 50.41342150069339, 36.26799513667536, 42.02597587274644, 50.217345898216706, 21.524034462437008, 44.79529408672708, 28.351364450003143, 21.62527016431446, 41.397428111233324, 52.69761987721528, 36.2053413071482, 18.195292510616746, 52.803706337585425, 25.230490401870107, 50.31919632593193, 44.41365034645768, 38.2271695104908, 33.126869554203225, 15.223512112409638, 27.874971410483557, 8.105136070013087, 44.47346480841835, 10.14598269826146, 11.07085182451717, 41.010343930628665, 27.0403666049765, 40.80303444349363, 38.02279045717413, 32.27403559024388, 51.74906793622088, 10.186223208672025, 14.895509424505299, 8.948450347319554, 34.71699875690443, 51.54147543541038, 20.725922416462907, 52.21281505191215, 50.40799422583597, 6.962472288773165, 26.172801204766365, 36.05028383985014, 23.05847968653286, 7.208139972630291, 46.61220822620078, 13.739881816165235, 34.50941370148213, 38.145842446601065, 34.04878536082592, 41.23287849851044, 16.475563375402672, 14.11925026096826, 39.980372846668125, 43.07033501414164, 41.37287977071714, 30.50982200652142, 26.641383804829335, 12.408179959768397, 16.781138628057885, 13.364390131780947, 34.46323884654629, 37.8745135931536, 32.182370447579785, 22.202366207558416, 29.050323440280085, 51.666383026168916, 54.62536760163619, 15.530760089418873, 34.13290692110351, 22.37733749542965, 20.179650781481598, 41.259685395502615, 44.12846466798945, 31.967475404294156, 30.412061853544238, 18.665993479302564, 30.877153187691825, 47.34534788086071, 28.224695197384914, 45.314196686277334, 11.316205032781653, 5.578791432435249, 43.028938189476484, 12.7178901253665, 25.85783586895584, 15.251143447050797, 27.3809174900528, 53.68879896422397, 29.698474810801013, 19.79237230713989, 48.22227390577793, 27.442578133473557, 21.141794828367683, 16.15494726640827, 38.85727078408446, 53.60497495712862, 41.15888695100071, 14.109380932166983, 24.501893520630325, 27.483858219881864, 13.100491259624864, 44.79968957590604, 53.17223473561348, 37.22539906952237, 28.49558001850449, 49.31112398644175, 37.53566324683381, 17.298757639040115]
stack6 = [14.917765144254648, 30.29128984613542, 31.752546337887956, 9.024335874760883, 6.492145789382947, 5.904171697623955, 24.88524042800771, 4.420073453501614, 10.649921944625646, 22.430215730918142, 8.003980354773702, 21.49718250677033, 16.021538459953806, 21.893125148558973, 9.25576735352363, 14.291058066244535, 9.668552504051728, 26.00340469843075, 3.0563309877756346, 13.790748153236732, 9.514079270856627, 31.20467251337272, 4.283511468588614, 24.564242300451554, 23.103964026258335, 13.470858822358382, 3.7869232000839794, 2.9533672437727536, 26.706544179782934, 31.998093618059645, 21.892714529749604, 15.85751212780341, 28.664945085800674, 14.325329237307653, 11.898048811634684, 15.471399052189998, 23.10111022989279, 24.593122460205237, 2.1706976950071626, 14.916027388352878, 25.785063618257613, 6.334240825705943, 30.280881567824032, 9.456657023686063, 24.07006919274926, 28.88756154138463, 30.21105986973291, 8.862540741924677, 10.109071721167348, 31.808847229340106, 26.167138768843344, 3.367782202475044, 4.230392436026553, 4.945805485095488, 22.28265827740083, 11.85790602717233, 13.160242562591659, 11.436234793411394, 16.18071821607171, 25.60657930051691, 24.487277804310924, 22.665603272619823, 4.173059051569275, 9.582454009867579, 27.460052440148875, 15.32180609824359, 10.302231871287505, 6.92860752238, 8.953050561608293, 30.798762248550315, 27.148135300934246, 5.128068349044609, 20.09979070703686, 8.910009919235733, 3.673047267639781, 22.26959315806689, 12.838705750383323, 8.127478606940308, 15.154218308982665, 6.034381915873139, 31.908907972051466, 29.78330876591297, 12.081125733331023, 14.38801827326077, 16.63914988783418, 31.54135256737345, 24.19710946191307, 27.969517925889292, 14.311509676025361, 18.708309669924432, 14.746809801902577, 22.98284450703785, 19.50163599439819, 25.07098390167777, 16.63620206793214, 10.038722643010729, 11.3865218583111, 6.502807287743112, 20.608025916881576, 31.36985694808665, 13.574131670681133, 20.612939579387813, 31.604890855696773, 12.359189994394097, 20.663266690662056, 28.325979914806712, 22.699958672248044, 9.456443195422986, 25.869895035216473, 25.864395894048865, 22.62115971278882, 8.5418286802546, 7.288853301474213, 7.115121179953874, 27.88558971635697, 10.932480053819631, 8.227680469860744, 12.789546823720945, 18.628066731196537, 10.563719074801565, 26.26577633889952, 14.749658245286689, 2.4335668680934015, 25.50936373858311, 11.413552262671393, 31.090712771148656, 20.741367590854175, 26.478605631143594, 15.437932240334897, 12.122975820607017, 27.41011003270392, 5.464910652025226, 21.55423328057124, 18.371448682297135, 7.584055191062442, 23.3846874064494, 5.468270857497359, 29.1836235223025, 21.33908810807511, 28.70883588835557, 16.127213252636338, 30.366206112688115, 23.08251810754285, 17.824574240711875, 21.329762576017256, 28.160328256794546, 13.513595938695225, 30.523385218868416, 21.02186442141204, 3.4325553494275534, 29.072588938288966, 28.695087722185697, 29.889189141640124, 16.900119253040987, 11.615962915836903, 16.86516916828102, 9.681140971067144, 17.01115962606935, 27.653017794934794, 15.524314997645574, 19.619844206783338, 15.420730186504768, 14.480652252741109, 14.212566697132367, 25.669412003850624, 5.105218995192525, 12.682196683262596, 17.903838042870923, 24.832359250983135, 26.143008320441307, 3.8355739304925125, 11.687563073328393, 9.049642314657717, 14.470227066676477, 27.312208670303917, 31.83988662947474, 13.325950101251852, 29.987899139279246, 5.2191007056847, 13.651235224138317, 5.085280862158561, 29.451131620259943, 24.232864502680805, 10.427189759711402, 13.231654842264263, 13.641003983129837, 23.664544847260373, 7.195069281532842, 19.280002845549035, 6.60725688037493, 31.254530444307257, 21.19470104333816, 25.96143093287244, 12.45156705693383, 16.566863775309674, 23.989316509988488, 25.423096980795652, 7.687495799691556, 26.65122741087634, 29.20348587179226, 18.84881888883371, 13.09125217355338, 25.137935914719055, 14.728413709949603, 24.8344272043295, 6.79345662454225, 15.302285214784881, 24.825370536153727, 31.094895169387872, 24.696239685562038, 16.19006958648251, 24.26035294450864, 20.310089973282114, 23.58342463997692, 12.2941040374678, 6.695438232982169, 6.4668521634251785, 29.805660353000924, 9.10561853982424, 17.604676862641906, 27.545780395157635, 13.83111177273021, 26.959198864155812, 11.250137159069766, 6.539400956546062, 18.1861629719727, 13.342260102223243, 25.9948862500971, 23.750431364616293, 8.639989918409755, 20.064239883104584, 10.326618496162654, 14.48709401976432, 4.298203365143459, 22.72065864610181, 9.606328827769907, 28.85226054364782, 19.70650568931906, 14.69413250740782, 22.913149350672455, 8.638952377915796, 6.334344632199301, 19.491293631270228, 23.5671765718795, 22.54353510471801, 13.036981752264305, 8.30074153648998, 18.346714032464345, 15.534763887221779, 24.48053718384026, 6.530308703471007, 16.960087421091906, 13.122862868836599, 31.47189247623512, 10.328962037276177, 23.657709627752354, 9.720727356647894, 26.026580782701426, 31.90282706840531, 7.583492077392817, 18.49151680596244, 23.434283481091057, 8.22546542663082, 15.094706008696019, 28.75094563532511, 5.515889853625734, 16.86797863858491, 20.430800709335642, 23.582111646163078, 13.00058322974896, 5.795479736085822, 15.57418463097387, 16.87276454654171, 6.848430318097884, 6.863498232353964, 24.428743794174512, 3.067930050463053, 3.6343749050778458, 23.38626290045897, 5.46952628607181, 23.593979712783007, 8.359533235088275, 14.612728477879253, 10.02557829537759, 18.33737985744158, 13.570255246148541, 31.927586505265637, 27.175773589338313, 8.759639524182795, 9.749398636636883, 29.46944692584438, 3.047449143019794, 9.115176762164937, 2.896110788377953, 21.845080250945745, 11.360349275599347, 22.10945350943529, 7.129321944331192, 15.543046597551209, 28.273904321810065, 13.746609563299717, 31.748786849688063, 4.055253924271209, 19.37983176529612, 12.41433327559953, 21.653351502549388, 28.753122277696583, 10.183358017778858, 14.685744845278228, 28.87149388517236, 27.32870886531908, 31.604128866349846, 12.651072993532694, 18.82967896493292, 31.59239704274546, 13.861286839041474, 31.06895980230653, 21.204837187483975, 30.52510731708358, 6.004286843382982, 29.147406907942322, 24.72364717072834, 23.758449310880216, 22.12430526362541, 3.40170372403945, 2.9431613088467596, 5.615949190982058, 27.31166532022343, 20.586874776670843, 24.291617996555868, 27.0218923996766, 17.653515258221503, 13.49512063865702, 4.547476237706576, 29.30270239273804, 28.194425980775186, 21.61644194468377, 11.27348467657367, 28.4840709478575, 28.9403104189578, 9.765687163507806, 20.13423674872918, 16.9752729090759, 20.628817489643495, 23.557392470645866, 27.4846423982937, 4.697596079837749, 2.059567730240253, 31.422588938602317, 9.43448850115571, 21.091194434121142, 20.691423771564715, 24.32695088068582, 2.0944808668434307, 20.65718859400939, 12.119989972600628, 31.519219822617913, 24.975301824879043, 20.636086154377526, 28.111360911092977, 13.734125606972933, 2.2536737176283976, 30.10419737172376, 28.466931894698057, 19.460412578802277, 24.004590449247875, 5.711802828805826, 14.254123321231333, 3.668502907959739, 26.9264936511201, 20.898335196190505, 9.024753985265855, 9.106034574946491, 22.80608917959876, 9.97921661716968, 30.936848857300703, 2.1280384317516106, 23.47880145274283, 9.92619402315978, 7.78036532088407, 3.3641277618304546, 4.179247908483578, 9.823460107977208, 9.40129471564436, 27.230112001120013, 9.456967040793254, 18.20040118111431, 5.786761965075365, 24.499922307353803, 11.978961407778028, 14.646828760147049, 8.190622461774199, 16.458961175568763, 11.776994315137323, 7.553874232764292, 5.0048369990508474, 27.536926982995148, 22.64007353904333, 4.073491990578935, 15.350495430283656, 24.368568744813516, 10.586507947172427, 7.958329603280296, 11.785791864104137, 20.858292548702337, 11.676918936674046, 11.296839393277574, 3.2087948573430185, 26.162963787583234, 3.8339299984342903, 3.2132354114551624, 22.67066752510058, 18.686712940433743, 3.8637231493844517, 24.294217238085427, 12.648499626097568, 28.263779553409584, 21.277369392552195, 23.535822755886937, 25.01012660379664, 5.636158978115804, 14.323843739377145, 26.669865636310977, 2.9117450844637567, 27.05364154834409, 29.71661405141389, 29.93422833426817, 30.565984191079696, 31.849630933325894, 29.333854080856455, 8.645101506315623, 4.677802156816279, 5.716968747001585, 15.542710647236927, 12.220984969576337, 14.164960602851735, 26.62892447855959, 20.808124386952233, 15.888026243912876, 21.8663857982632, 11.862282063855988, 29.627490449715197, 5.129143513860651, 20.18024885328042, 2.485240551855708, 30.901234487393864, 9.504076255901856, 10.974115414395495, 8.377802236967103, 13.040508871650838, 5.370613302493785, 29.4318650052576, 26.342554745719646, 10.452212906474175, 5.679652007375101, 16.74463475688387, 29.612907297432205, 12.799777480619937, 21.860490429976444, 21.678359896789498, 16.601702158857073, 6.282120150240845, 30.615608160726303, 5.703049200474457, 11.317665686093285, 23.516315232857558, 12.985428833954487, 31.32610301228419, 9.495702844593426, 3.1762902847113823, 4.161214507449728, 27.62620008162969, 4.328877202696837, 12.21082224956942, 27.649209173086252, 28.831716696076697, 27.322373878711065, 11.169677861176353, 30.995833814141204, 4.180704474786732, 3.8440041403773177, 23.99524196642101, 31.395098506310443, 12.732283337925908, 21.683405392982067, 15.783055611779263, 8.192996318022221, 25.885032361335224, 20.539020127027662, 24.29381540604946, 16.50007919599469, 9.288792113921644, 9.587008137481126, 26.078392987699246, 5.687744480561445, 5.248193126207129, 22.310483031055927, 12.888129771972707, 2.8323884490560127, 13.483513775417235, 16.110206767579797, 19.749792633650912, 7.020822585795173, 5.1487606867904905, 3.5569847200478613, 15.079364831256663, 4.98002711746326, 14.644001514694747, 16.526697064423182, 4.8448751150438065, 8.668127383348263, 22.685739922386453, 10.739240939900258, 16.50446090793309, 14.740802182257276, 14.833603969333291, 31.34685155688302, 14.723573476560917, 30.233555515022218, 19.69421998255379, 25.27053522441573, 18.999171124793047, 21.89532871874384, 21.119334181092263, 16.98900782237145, 30.82800405070897, 20.898610561656987, 22.104351856182937, 3.821882882189233, 23.600753389226167, 21.06941687028177, 5.946819147841599, 8.598579688033738, 11.883112937194511, 29.86909337949057, 23.10296142381526, 16.688829636574695, 4.067551033895088, 30.075563342975954, 20.091697266606545, 24.59380104779308, 26.925214179395713, 16.83961763980971, 16.533530520100538, 10.028061697864336, 5.884348387395251, 7.169243184630277, 23.955188172491013, 16.786180376896354, 31.851625858965686, 25.585078281261328, 19.544843367188015, 31.393052181249278, 11.85747021419635, 12.32795088694823, 4.640386194590237, 25.594678403527862, 13.42124260185407, 10.76181443335982, 16.328851609771856, 28.900001530156832, 18.97783329846895, 25.541213958858005, 13.165560770074672, 13.674337958432039, 21.31445688192532, 15.29908362816993, 28.3397541750599, 6.373696841444792, 22.07048542671493, 21.636877325613778, 19.437204861811683, 14.038095474549513, 4.703247743845633, 3.216648231128714, 3.3070455801624306, 24.012063622249915, 7.629378850034167, 24.43434363012411, 22.857197757104586, 13.938322532195905, 13.786297090094896, 15.970201022275049, 26.726046190317994, 23.322257994425375, 28.047041941641318, 15.168948125700995, 19.494090654963088, 21.07352752179925, 9.436540262756306, 25.221290196663116, 31.824155594197975, 4.597549432656365, 24.661405359237378, 5.361396688311612, 27.845931950292965, 24.778003915458868, 4.291755996680351, 2.109494755249554, 25.64989331870314, 3.3882758666805897, 8.130628695408031, 11.30698927181486, 11.196475508650595, 3.579021345819668, 2.9842888731861366, 16.545260952421586, 30.153390516510484, 21.16287134340593, 10.688864148880509, 22.84656965500272, 8.673041651151323, 20.07096558339624, 28.805234024102358, 25.17878635399685, 20.488378931764682, 23.315993988351764, 26.7139326388512, 28.080969943848608, 20.146431796527093, 10.358554160392286, 10.31850534574989, 8.324962985911512, 25.163553341400437, 25.140735352297114, 2.064776661324333, 3.1582564321897815, 9.390827599620419, 22.018151234052954, 23.35656887285759, 30.424944841322564, 2.1802404456778217, 21.518126332434868, 4.791659965347933, 6.247128214200732, 17.755188002516157, 5.174278596379823, 16.165432183931443, 30.34304787258684, 13.741988684384461, 13.13398671170122, 6.601886464026493, 13.291199975731999, 5.258723866413561, 10.099612518535816, 15.128465324272394, 22.202543011680206, 16.48022311868862, 20.348153503386683, 21.555720935533557, 30.87732926280712, 10.07331484350274, 28.000822421232716, 29.17117339594967, 20.878304051476434, 31.914202090337668, 15.619279847981067, 9.924847165648298, 4.286002760711481, 17.537870921873036, 13.611996400428936, 12.846677227158914, 29.13999511446885, 3.677415476650822, 4.599696123766851, 10.080775994288668, 31.73214665648869, 13.847536860039058, 13.53261999446591, 18.23288734254795, 24.987217735849253, 14.46084275579147, 23.73129777177641, 31.996184217771656, 23.55117309436534, 10.264264754301255, 24.406728429639575, 21.80450778758977, 10.75808452383984, 10.94781503989389, 21.9827078322711, 17.176800996623637, 14.120761431796478, 6.977569091478293, 6.629068806250877, 27.423621314414888, 21.045724856190283, 19.14078221845017, 2.522813177218937, 13.144216437953204, 20.312370718693117, 21.41604467883109, 30.52325022765185, 16.980620204507662, 14.596468950270618, 6.562387113813542, 7.56372698727824, 27.17652331587764, 22.5036415920882, 17.938211243930247, 30.40216482828668, 22.570950937196496, 3.740526457796485, 16.903703199858555, 11.723975540859882, 26.477995064990246, 5.35026013471362, 23.10214261082825, 8.131376109297065, 14.0556584528435, 13.35693175037934, 21.0492170989005, 30.367773644794152, 5.812584584131642, 15.664810648488254, 22.590853958558633, 7.003125345232602, 23.625484692880562, 5.719068128327919, 31.75699283386262, 9.344983097240995, 19.7423833075226, 23.846412268585787, 4.949418292759488, 29.24969887408135, 6.396967954937598, 24.063072478876702, 19.472797279659265, 16.408258351195066, 25.173110824077586, 14.053701634608588, 8.695332622341546, 9.605498672190585, 31.923876872154707, 29.244580263315957, 23.816831829084332, 17.603038862909667, 2.5790885515426183, 12.906959119920309, 26.69358155661118, 6.215298189915112, 20.83056055639944, 28.4052933391734, 11.346540120598757, 31.653013971969873, 15.775257583749548, 11.082760142202822, 6.38901221512208, 5.851868590574358, 6.953796663642539, 11.58265914005188, 10.77374733593023, 9.702978161743385, 16.657722625455158, 10.810618556874886, 30.84935613246757, 15.90594810034409, 7.095971160293276, 14.832191956275897, 15.266738408016582, 12.61944712715728, 21.006855299016777, 12.628104084582132, 7.249948158459867, 30.314840570890887, 5.244604372501251, 18.043119921781624, 9.021015633072096, 6.289409891748663, 23.984642371084057, 19.423107673314988, 31.16847455797903, 20.52471510547731, 4.7921455040081575, 2.406143736177289, 4.014060994238528, 16.8405196712958, 18.354628440101987, 16.265477145694085, 12.706866548896778, 9.300962960013434, 9.007962164929515, 6.360218715603608, 10.801263776677178, 31.482444767265395, 2.0353292118054993, 8.49195470277928, 26.465091249728417, 10.682794942613132, 10.92091023441182, 19.814186515454324, 14.408811713213977, 21.129276584667103, 25.13813668605494, 31.425715646328165, 5.511828129842836, 13.916264031772211, 5.737560349739767, 19.861441998786724, 10.1897300145726, 12.299036468300178, 25.470411821721576, 23.071319928142472, 26.18292644126552, 25.11409630145883, 9.79120344799452, 9.271495668415842, 14.410014275442634, 4.506730556911323, 11.438473048578992, 9.900335108535582, 9.124699502216988, 31.131101115056854, 19.062681294621036, 20.516967041464316, 15.59411712126347, 23.87864292541244, 8.725645499137917, 24.226995244434853, 6.531787055262794, 30.54471781097454, 7.205737554192074, 11.162649793571854, 15.176502023819943, 18.680596167140617, 17.46125645543822, 26.74522529305031, 3.0039178483832734, 25.506159136286783, 8.328762790482493, 17.119639490847973, 6.569561145038189, 7.868339687158065, 4.355275339332205, 26.135260008212132, 26.821079500937838, 31.01982026091573, 30.378370185145528, 5.707978132038743, 29.481066995410018, 12.38517686392267, 19.208950048257762, 20.963211231484568, 3.3912283222468558, 10.73520780727711, 27.315542190857514, 18.36974147157166, 8.123880600572456, 7.666087257592497, 9.899460295760747, 20.49715946286382, 13.777785958721491, 31.19673015290056, 10.346230087281327, 14.958552716102215, 12.47783579676883, 8.715456078247001, 3.366825911410292, 29.087874012712405, 30.47362632750108, 14.893784271780412, 25.120915639723716, 28.446117287654292, 18.973837696880548, 28.456928513364314, 15.942676534383258, 13.866873058106899, 31.160321732362064, 13.47332968505309, 6.280252115084001, 20.89527862706837, 26.022131596145098, 27.66496970269121, 28.693851673079248, 3.543772416467654, 4.173024387699661, 29.80563873756934, 8.66396688506126, 7.928850574823531, 11.137012642789887, 2.9859317555415736, 16.52862586757466, 27.268672434272787, 31.738341896766116, 31.51960995737613, 18.656930610256506, 28.14051982261724, 23.54842373433103, 8.336722633887307, 11.936320025299931, 11.110488083834131, 14.482148593638025, 19.87555802606072, 5.506543037913703, 26.4784038792305, 22.40997308018911, 3.0967012212524563, 4.562421198405351, 27.317206841442605, 7.137003404279809]

my_stacks = [stack0, stack1, stack2, stack3, stack4, stack5, stack6]

# find the minimum 5% of lengths in order to be careful
statistics = []
for layer in my_stacks:
    for element in layer:
        statistics.append(element)
statistics.sort()
min_1_percent = statistics[len(statistics)//100]
min_5_percent = statistics[len(statistics)//20]
min_10_percent = statistics[len(statistics)//10]
min_33_percent = statistics[len(statistics)//3]
total_stack_length = len(statistics)


# Point Distribution
space_left_pts = [-45, 4, 35, 55, 60]
space_left_cats = [min_1_percent, min_5_percent, min_10_percent, min_33_percent]
emptying_stack_pts = 0.0
joint_pts = {"joint": 16, "void": 0}
board_length_reward = 0.8
# very counterproductive, keep it at zero!
close_to_goal_reward = 0.0

# create the basic setup
lamellas = []
prmry_grid = []
primary_board_width = 6.0
for i in range(10):
    lamellas.append([])

for i in range(65):
    prmry_grid.append(i*16)

total_length = prmry_grid[-1]


class SecondarySpanSystem:
    def __init__(self, grid, stks, stack_scr, joint_scr, space_left_scr,
                 space_left_kat, len_score, no_lamellas_per_layer, no_layers, brd_width):

        self.primary_grid = grid
        self.lamellas = []
        self.stacks = stks
        self.stack_minimums = []
        self.stack_ids = []
        self.available_boards = []
        self.total_no_boards_available = 0
        for i in range(len(self.stacks)):
            self.stack_ids.append(0)
            self.available_boards.append(self.stacks[i][0])
            self.total_no_boards_available += len(self.stacks[i])
            self.stack_minimums.append(min(self.stacks[i]))
        self.average_stack_size = self.total_no_boards_available / len(self.stacks)
        self.stack_reward = stack_scr
        self.joint_reward = joint_scr
        self.space_left_reward = space_left_scr
        self.space_left_categories = space_left_kat
        self.length_reward = len_score
        self.board_width = brd_width
        self.layer_no = no_layers
        self.end_point = self.primary_grid[-1]
        self.boards_dropped = 0

        # set up all the lamella strings per layer
        for i in range(no_layers):
            self.lamellas.append([])
            for j in range(no_lamellas_per_layer):
                my_lam = self.LamellaString(j, i)
                self.lamellas[i].append(my_lam)

    class LamellaString:
        def __init__(self, index, lay):
            self.id = index
            self.boards = []
            self.stack_ranking = []
            self.layer = lay
            self.next_start_point_mode = "joint"
            self.next_start_point = 0
            self.done = False
            self.distance_to_end = None

    class Timberboard:
        def __init__(self, leng, end):
            self.length = leng
            self.end_pt = end

    def initial_setup(self):
        stacks = [stack0, stack1, stack2, stack3, stack4]

    # find the average values of the stacks
    def neighbouring_joints(self, pt):
        counter = 1
        while pt > self.primary_grid[counter]:
            counter += 1
            # if the board is longer than the whole thing
            if counter == len(self.primary_grid)-1:
                if pt > self.primary_grid[counter]:
                    return {"lower_boarder": self.primary_grid[counter], "upper_boarder": None}
                else:
                    return {"lower_boarder": self.primary_grid[counter-1], "upper_boarder": self.primary_grid[counter]}

        lower_brd = self.primary_grid[counter - 1]
        upper_brd = self.primary_grid[counter]
        return {"lower_boarder": lower_brd, "upper_boarder": upper_brd}

    def ranking(self, max_iterations=None):
        for k in range(1):
            done = False
            my_count = -1
            print(self.end_point)

            while not done:
                if max_iterations:
                    if my_count > max_iterations:
                        done = True
                my_count += 1

                # print("\n")
                # print("New Iteration")

                # update the available boards
                for i in range(len(self.available_boards)):
                    board_id = self.stack_ids[i]
                    if board_id > (len(my_stacks[i])-1):
                        self.available_boards[i] = None
                    else:
                        self.available_boards[i] = my_stacks[i][board_id]

                # now go through the lamella and board stacks and check for the best option
                end_points = []
                # get data of the current round

                for lam in self.lamellas[k]:
                    lam.stack_ranking_temp = []
                    lam.end_points_temp = []
                    lam.end_point_modes_temp = []
                    lam.potentially_done = False
                    if lam.next_start_point_mode == "done":
                        print("segment_finished")
                        continue
                    lam.distance_to_end = self.end_point - lam.next_start_point

                    # now find the best board for the lamella
                    for stack_no, board in enumerate(self.available_boards):
                        if self.available_boards[stack_no] is None:
                            lam.stack_ranking_temp.append(-500)
                            lam.end_point_modes_temp.append(None)
                            lam.end_points_temp.append(None)
                            continue

                        # STEP 1: DETERMINE WHERE THE BOARD WILL END
                        # if it starts on a joint then there's not much flexibility
                        # make sure we haven't gone too far

                        # in that case we don't even have to check (the board is too long) and can go ahead
                        if (lam.distance_to_end) < board:
                            lam.stack_ranking_temp.append(-500)
                            lam.end_point_modes_temp.append(None)
                            lam.end_points_temp.append(None)
                            continue
                        elif (self.end_point - lam.next_start_point) - board < 2.0:
                            lam.stack_ranking_temp.append(0)

                        else:
                            lam.stack_ranking_temp.append(0)

                        if lam.next_start_point_mode == "joint":
                            # special case: if we can reach the end then let's forget about starting in a void/joint
                            boarder_low = self.neighbouring_joints(lam.next_start_point + self.board_width/2 + board)
                            boarder_high = self.neighbouring_joints(lam.next_start_point - self.board_width/2 + board)
                            if boarder_low == self.end_point and boarder_high == self.end_point:
                                # in case we start in a void now
                                lam.stack_ranking_temp.append(2900)
                                lam.end_points_temp.append(self.end_point + self.board_width/2)
                                lam.end_point_modes_temp.append("done")
                                # in the unlikely case we can still start on the board, add a bonus
                                if ((self.end_point + self.board_width/2) - board.length -
                                    lam.next_start_point < self.board_width/4):
                                    lam.stack_ranking_temp.append(200)
                                continue

                            end_point_board = lam.next_start_point + board
                            end_point_neighbours = self.neighbouring_joints(end_point_board)
                            # if we have gone too far
                            if not end_point_neighbours["upper_boarder"]:
                                lam.stack_ranking_temp[stack_no] = -500
                                lam.end_point_modes_temp.append(None)
                                lam.end_points_temp.append(None)
                                continue

                            # determine whether the board ends up on top of another board
                            if abs(end_point_neighbours["upper_boarder"]-end_point_board) < primary_board_width/2 or\
                                abs(end_point_neighbours["lower_boarder"]-end_point_board) < primary_board_width/2:
                                end_joint_mode = "joint"
                            else:
                                end_joint_mode = "void"

                        # if it starts in a void; the starting point is slightly more flexible in this case
                        else:

                            start_point_range = [lam.next_start_point, self.neighbouring_joints(lam.next_start_point)["upper_boarder"]]
                            # just in case we have fucked up
                            if not start_point_range[1]:
                                print("didn't write down the fact that it has already finished")
                                lam.stack_ranking_temp[stack_no] = -500
                                break
                            end_point_low = start_point_range[0] + board
                            end_point_high = start_point_range[1] + board
                            # special bonus if the board should just reach the end
                            if self.neighbouring_joints(end_point_low)["upper_boarder"] == self.end_point:
                                lam.stack_ranking_temp[stack_no] += 3000
                                lam.end_points_temp.append(self.end_point + self.board_width/2)
                                lam.end_point_modes_temp.append("done")
                                continue
                            elif self.neighbouring_joints(end_point_low) != self.neighbouring_joints(end_point_high):
                                end_joint_mode = "joint"
                                end_point_board = self.neighbouring_joints(end_point_low)["upper_boarder"]
                            else:
                                end_joint_mode = "void"
                                end_point_board = end_point_low

                        # now implement the end point mode reward in the ranking before going to step 2
                        lam.stack_ranking_temp[stack_no] += self.joint_reward[end_joint_mode]

                        # STEP 2: DETERMINE HOW MUCH SPACE IS LEFT ON THE END
                        distance_to_end = total_length - end_point_board
                        distance_category = 0
                        while (distance_to_end > self.space_left_categories[distance_category] and
                            distance_category < (len(self.space_left_categories)-1)):
                            distance_category += 1

                        lam.stack_ranking_temp[stack_no] += self.space_left_reward[distance_category]

                        # STEP 3: CHECK HOW MANY BOARDS ARE ON THAT STACK COMPARED TO OTHERS
                        stack_size = len(self.stacks[stack_no])
                        size_difference = self.average_stack_size - stack_size
                        lam.stack_ranking_temp[stack_no] += size_difference * self.stack_reward

                        lam.end_points_temp.append(end_point_board)
                        lam.end_point_modes_temp.append(end_joint_mode)

                        # STEP 4: TRY TO EMPTY BOARDS THAT ARE LONGER FIRST
                        lam.stack_ranking_temp[stack_no] += board * board_length_reward

                        # STEP 5: TRY TO COMPLETE LONGER STRINGS FIRST
                        lam.stack_ranking_temp[stack_no] += end_point_board * close_to_goal_reward

                    lam.best_stack_id = lam.stack_ranking_temp.index(max(lam.stack_ranking_temp))
                    lam.highscore = max(lam.stack_ranking_temp)
                    print(lam.stack_ranking_temp)

                highscore = None
                highindex = None
                winning_lamella_index = 0
                # find the best highscore of all lamellas
                # just for analysis
                lamella_end_points = []
                lamella_end_point_modes = []

                for i, my_lamella in enumerate(self.lamellas[k]):
                    lamella_end_points.append(my_lamella.next_start_point)
                    lamella_end_point_modes.append(my_lamella.next_start_point_mode)
                    if my_lamella.next_start_point_mode == "done":
                        continue
                    elif not highscore:
                        highscore = 0
                    if my_lamella.highscore > highscore:
                        winning_lamella_index = i
                        highscore = my_lamella.highscore

                print(lamella_end_points)
                print(lamella_end_point_modes)
                print(self.available_boards)
                print("\n")
                if not highscore:
                    done = True
                    for entry in lamella_end_point_modes:
                        if not entry == "done":
                            done = False
                            break
                    if not done:
                        # if it just can't find any suitable board for the finish, then throw boards off the stack
                        max_distances_to_end = 0
                        # find out the maximum distance to the end; don't throw away any boards above that
                        for lam2 in self.lamellas[k]:
                            if lam2.next_start_point_mode != "done" and lam2.distance_to_end > max_distances_to_end:
                                max_distances_to_end = lam2.distance_to_end

                        for i in range(len(self.stack_ids)):
                            if self.available_boards[i]:
                                # so you don't throw away all boards but just those where you can realistically get a better one
                                if self.stack_minimums[i] < max_distances_to_end:
                                    self.stack_ids[i] += 1
                                    self.boards_dropped += 1

                        if self.available_boards.count(None) == len(self.available_boards):
                            done = True
                            print("couldn't finish it")
                            break
                else:
                    winning_lamella = self.lamellas[k][winning_lamella_index]
                    winning_stack = winning_lamella.best_stack_id

                    # make sure a different board is picked next time
                    self.stack_ids[winning_stack] += 1
                    self.total_no_boards_available -= 1
                    winning_brd_length = self.available_boards[winning_lamella.best_stack_id]
                    winning_brd_end = winning_lamella.end_points_temp[winning_lamella.best_stack_id]
                    lamella_brd = self.Timberboard(winning_brd_length, winning_brd_end)
                    winning_lamella.boards.append(lamella_brd)
                    winning_lamella.next_start_point_mode = winning_lamella.end_point_modes_temp[winning_lamella.best_stack_id]
                    winning_lamella.next_start_point = winning_lamella.end_points_temp[winning_lamella.best_stack_id]
                    # print(winning_lamella_index)
                    # print(winning_lamella.next_start_point)
                    if my_count == 72:
                        print("break")
                    print(my_count)


    def procedure(self):
        self.initial_setup()
        self.ranking(300)
        print(self.boards_dropped)
        print("hello")
        return self.lamellas
    # to implement later: is there already a combination of boards out there that can get you to your goal?


mySystem = SecondarySpanSystem(prmry_grid, my_stacks, emptying_stack_pts, joint_pts, space_left_pts, space_left_cats, 2, 12, 2, 4)
mySystem.procedure()

# check that neighbouring lamellas don't have the same joints

